#! cargo-eval.exe --

//! ```cargo
//! [package]
//! edition = "2018"
//!
//! [dependencies]
//! anyhow = "1"
//! structopt = "0.2.13"
//! winrt-notification = "0.2.2"
//! ```
#![deny(warnings)]

use {
    anyhow::{anyhow, bail, Error as AnyhowError},
    structopt::StructOpt,
    winrt_notification::{Duration, Sound, Toast},
};

#[derive(StructOpt)]
struct Cli {
    #[structopt(short, long)]
    title: Option<String>,
    #[structopt(short = "m", long)]
    text1: Option<String>,
    #[structopt(short = "n", long)]
    text2: Option<String>,
    #[structopt(short, long)]
    sound: Option<String>,
    #[structopt(short, long)]
    duration: Option<String>,
}

fn main() -> Result<(), AnyhowError> {
    let Cli {
        title,
        text1,
        text2,
        sound,
        duration,
    } = Cli::from_args();

    let mut toast = Toast::new(
        "{1AC14E77-02E7-4E5D-B744-2EB1AE5198B7}\\WindowsPowerShell\\v1.0\\powershell.exe",
    );

    if let Some(t) = title {
        toast = toast.title(&t);
    }

    if let Some(t) = text1 {
        toast = toast.text1(&t);
    }

    if let Some(t) = text2 {
        toast = toast.text2(&t);
    }

    if let Some(mut s) = sound {
        s.make_ascii_lowercase();
        toast = toast.sound(match s.as_ref() {
            "sms" => Some(Sound::SMS),
            "none" => None,
            _ => bail!("incorrect sound name"),
        });
    };

    if let Some(mut d) = duration {
        d.make_ascii_lowercase();
        let d = match d.as_ref() {
            "short" => Duration::Short,
            "long" => Duration::Long,
            _ => bail!("incorrect duration name"),
        };
        toast = toast.duration(d);
    }

    toast
        .show()
        .map_err(|e| anyhow!("unable to toast: {:?}", e))?;
    Ok(())
}
